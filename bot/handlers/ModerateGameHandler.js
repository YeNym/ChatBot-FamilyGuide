const db = require('../../firebase');
const sendMainMenu = require('../views/MainMenu');
const { getSession } = require('../utils/session');

class ModerateGameHandler {
    constructor(bot) {
        this.bot = bot;

        bot.on('callback_query', async (query) => {
            const userId = query.from.id;
            const chatId = query.message.chat.id;
            const messageId = query.message.message_id;
            const data = query.data;
            const session = await getSession(userId);

            // –ù–∞—á–∞–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if (data === 'moderate_games') {
                const hasNext = await this.showNextGame(chatId);
                if (!hasNext) {
                    await this.bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∏–≥—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
                    return sendMainMenu(bot, chatId, session.name, session.role);
                }
                return;
            }

            // –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (data === 'back_to_main_menu') {
                await bot.answerCallbackQuery(query.id);
                return sendMainMenu(bot, chatId, session.name, session.role);
            }

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É
            if (data.startsWith('approve_game_')) {
                const gameId = data.replace('approve_game_', '');
                const docRef = db.collection('pendingGames').doc(gameId);
                const doc = await docRef.get();

                if (!doc.exists) {
                    await bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.', show_alert: true });
                    return sendMainMenu(bot, chatId, session.name, session.role);
                }

                const gameData = doc.data();
                await db.collection('games').add(gameData);
                await docRef.delete();

                await bot.answerCallbackQuery(query.id);
                await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
                await bot.sendMessage(chatId, `‚úÖ –ò–≥—Ä–∞ "${gameData.name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);

                const hasNext = await this.showNextGame(chatId);
                if (!hasNext) {
                    await this.bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∏–≥—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
                    return sendMainMenu(bot, chatId, session.name, session.role);
                }
                return;
            }

            // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É
            if (data.startsWith('reject_game_')) {
                const gameId = data.replace('reject_game_', '');
                const docRef = db.collection('pendingGames').doc(gameId);
                const doc = await docRef.get();

                if (!doc.exists) {
                    await bot.answerCallbackQuery(query.id, { text: '–ò–≥—Ä–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.', show_alert: true });
                    return sendMainMenu(bot, chatId, session.name, session.role);
                }

                const gameData = doc.data();
                await docRef.delete();

                await bot.answerCallbackQuery(query.id);
                await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
                await bot.sendMessage(chatId, `‚ùå –ò–≥—Ä–∞ "${gameData.name}" —É–¥–∞–ª–µ–Ω–∞.`);

                const hasNext = await this.showNextGame(chatId);
                if (!hasNext) {
                    await this.bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∏–≥—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
                    return sendMainMenu(bot, chatId, session.name, session.role);
                }
                return;
            }
        });
    }

    async showNextGame(chatId) {
        const totalSnapshot = await db.collection('pendingGames').get();
        const total = totalSnapshot.size;

        const snapshot = await db.collection('pendingGames')
            .orderBy('createdAt', 'asc')
            .limit(1)
            .get();

        if (snapshot.empty) {
            return false;
        }

        const doc = snapshot.docs[0];
        const game = doc.data();
        const gameId = doc.id;

        const text = `üéÆ *${game.name}*\n\nüìÑ ${game.description}\nüóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${game.category}\nüîû –í–æ–∑—Ä–∞—Å—Ç: ${game.age}\n\nüïπ –í—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç: ${total} –∏–≥—Ä`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: `approve_game_${gameId}` },
                    { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: `reject_game_${gameId}` }
                ],
                [
                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }
                ]
            ]
        };

        if (game.image) {
            await this.bot.sendPhoto(chatId, game.image, {
                caption: text,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } else {
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }

        return true;
    }
}

module.exports = ModerateGameHandler;
