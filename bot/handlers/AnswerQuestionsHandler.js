const db = require('../../firebase');
const { getSession } = require('../utils/session');
const sendMainMenu = require('../views/MainMenu');
const { Timestamp } = require('firebase-admin/firestore');

let initialized = false;

class AnswerQuestionsHandler {
    constructor(bot) {
        if (initialized) return;
        initialized = true;

        this.bot = bot;
        this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
        this.bot.on('message', this.handleMessage.bind(this));
    }

    async handleCallbackQuery(query) {
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const userId = query.from.id;
        const data = query.data;

        const session = await getSession(userId);
        await this.safeAnswerCallback(query.id);

        switch (true) {
            case data === 'answer_questions':
                return this.showNextQuestion(chatId, session, 0);

            case data === 'question_next':
                return this.showNextQuestion(chatId, session, (session.currentQuestionIndex || 0) + 1);

            case data === 'question_prev':
                return this.showNextQuestion(chatId, session, (session.currentQuestionIndex || 0) - 1);

            case data.startsWith('reply_question_'):
                const [_, __, docId, toUserId] = data.split('_');
                session.answeringQuestionId = docId;
                session.answerToUserId = toUserId;
                session.step = 'awaiting_admin_answer';
                return this.bot.sendMessage(chatId, '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main_from_questions' }]
                        ]
                    }
                });

            case data === 'back_to_main_from_questions':
                this.clearSession(session);
                await this.safeDeleteMessage(chatId, messageId);
                return sendMainMenu(this.bot, chatId, session.name, session.role);
        }
    }

    async handleMessage(msg) {
        const userId = msg.from.id;
        const chatId = msg.chat.id;
        const text = msg.text?.trim();
        const session = await getSession(userId);

        if (session.step !== 'awaiting_admin_answer') return;

        const { answerToUserId, answeringQuestionId } = session;
        if (!answerToUserId || !answeringQuestionId) return;

        // 1. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
            await this.bot.sendMessage(answerToUserId, `üì¨ –û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\n\n${text}`);
        } catch (error) {
            console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error.message);
            await this.bot.sendMessage(chatId, '‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.');
        }

        // 2. –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        try {
            await db.collection('questions').doc(answeringQuestionId).delete();
        } catch (error) {
            console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã:', error.message);
            await this.bot.sendMessage(chatId, '‚ö† –í–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        }
        const prevIndex = session.currentQuestionIndex ?? 0;
        this.clearSession(session);

        const snapshot = await db.collection('questions').orderBy('timestamp', 'asc').get();
        const remaining = snapshot.docs;

        if (remaining.length === 0) {
            await this.bot.sendMessage(chatId, '‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.');
            return sendMainMenu(this.bot, chatId, session.name, session.role);
        }

        const nextIndex = prevIndex >= remaining.length ? remaining.length - 1 : prevIndex;
        return this.showNextQuestion(chatId, session, nextIndex);
    }


    async showNextQuestion(chatId, session, index = 0) {
        try {
            const snapshot = await db.collection('questions').orderBy('timestamp', 'asc').get();
            const questions = snapshot.docs;

            if (!questions.length) {
                return this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.');
            }

            if (index < 0 || index >= questions.length) {
                return this.bot.sendMessage(chatId, 'üì≠ –í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.');
            }

            session.questionsCache = questions.map(doc => ({ id: doc.id, ...doc.data() }));
            session.currentQuestionIndex = index;

            await this.hidePreviousQuestionKeyboard(chatId, session);

            const doc = questions[index];
            const data = doc.data();
            const formattedDate = this.formatTimestamp(data.timestamp);

            const caption = `üìù *–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n*–¢–µ–∫—Å—Ç:* ${data.question}\nüïí ${formattedDate}`;
            const inline_keyboard = [];

            if (index > 0) inline_keyboard.push({ text: '‚¨Ö –ù–∞–∑–∞–¥', callback_data: 'question_prev' });
            inline_keyboard.push({ text: '‚úç –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_question_${doc.id}_${data.userId}` });
            if (index < questions.length - 1) inline_keyboard.push({ text: '‚û° –î–∞–ª–µ–µ', callback_data: 'question_next' });

            const reply_markup = {
                inline_keyboard: [inline_keyboard, [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main_from_questions' }]]
            };

            const sent = await this.bot.sendMessage(chatId, caption, {
                parse_mode: 'Markdown',
                reply_markup
            });

            session.lastQuestionMessageId = sent.message_id;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
            return this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã.');
        }
    }

    async hidePreviousQuestionKeyboard(chatId, session) {
        if (!session.lastQuestionMessageId) return;

        try {
            await this.bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                { chat_id: chatId, message_id: session.lastQuestionMessageId }
            );
        } catch (err) {
            if (err?.response?.body?.description !== 'Bad Request: message is not modified') {
                console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', err.message);
            }
        }

        session.lastQuestionMessageId = null;
    }


    clearSession(session) {
        session.step = null;
        session.answerToUserId = null;
        session.answeringQuestionId = null;
        session.lastQuestionMessageId = null;
        session.questionsCache = null;
        session.currentQuestionIndex = null;
    }

    formatTimestamp(timestamp) {
        const date = timestamp instanceof Timestamp ? timestamp.toDate() : new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    async safeAnswerCallback(callbackId) {
        try {
            await this.bot.answerCallbackQuery(callbackId);
        } catch (e) {
            console.warn('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ answerCallbackQuery:', e.message);
        }
    }

    async safeDeleteMessage(chatId, messageId) {
        try {
            await this.bot.deleteMessage(chatId, messageId);
        } catch (e) {
            console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
        }
    }
}

module.exports = AnswerQuestionsHandler;