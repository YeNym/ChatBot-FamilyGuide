const db = require('../../firebase');
const { getSession } = require('../utils/session');
const sendMainMenu = require('../views/MainMenu');
const keyboards = require('../config/keyboards');
const {gameNotification} = require('../config/messages');

class GameViewHandler {
    constructor(bot) {
        this.bot = bot;
        this.pageSize = 5;

        bot.on('callback_query', async (query) => {
            const { id: callbackId, data, from, message } = query;

            try {
                await this.bot.answerCallbackQuery(callbackId);
            } catch (err) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ answerCallbackQuery:', err.message);
                return;
            }

            const userId = from.id;
            const chatId = message.chat.id;
            const session = await getSession(userId);


            if (data === 'back_to_main_menu_view') {
                session.step = null;
                return sendMainMenu(bot, chatId, session.name, session.role);
            }

            if (data === 'view_games') {
                session.step = 'filter_category';
                session.filter = {};

                return bot.sendMessage(chatId, gameNotification, {
                    reply_markup: {
                        inline_keyboard: [
                            ...keyboards.filterCategoryKeyboard.inline_keyboard,
                            ...keyboards.backKeyboard.inline_keyboard
                        ]
                    }
                });
            }

            if (data === 'backKeyboard_menu') {
                session.step = null;
                session.filter = null;

                try {
                    await this.bot.deleteMessage(chatId, message.message_id);
                } catch (err) {
                    console.warn('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:', err.message);
                }

                // return sendMainMenu(this.bot, chatId, session.name, session.role);
            }

            if (data.startsWith('filter_game_category_') && session.step === 'filter_category') {
                return this.handleCategorySelection(data, chatId, message.message_id, session);
            }

            if (data.startsWith('filter_game_age_') && session.step === 'filter_age') {
                return this.handleAgeSelection(data, chatId, message.message_id, session);
            }

            if (data.startsWith('games_page_')) {
                const page = parseInt(data.replace('games_page_', ''));
                session.page = page;
                return this.sendGamesPage(chatId, session.filter, page, session);
            }

            if (data.startsWith('game_')) {
                const gameId = data.replace('game_', '');
                return this.showGameDetails(chatId, gameId, session.page || 0, session.filter);
            }
        });
    }

    async handleCategorySelection(data, chatId, messageId, session) {
        const category = data.replace('filter_game_category_', '');
        session.filter.category = category;
        session.step = 'filter_age';

        try {
            return await this.bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        ...keyboards.filterAgeKeyboard.inline_keyboard,
                        ...keyboards.cancelKeyboard.inline_keyboard
                    ]
                }
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞:', err);
            return this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:', {
                reply_markup: {
                    inline_keyboard: [
                        ...keyboards.filterAgeKeyboard.inline_keyboard,
                        ...keyboards.cancelKeyboard.inline_keyboard
                    ]
                }
            });
        }
    }

    async handleAgeSelection(data, chatId, messageId, session) {
        const age = data.replace('filter_game_age_', '') + '+';
        session.filter.age = age;
        session.page = 0;
        session.step = null;

        try {
            await this.bot.deleteMessage(chatId, messageId);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º:', err);
        }

        return this.sendGamesPage(chatId, session.filter, 0, session);
    }

    async sendGamesPage(chatId, filter, page = 0, session) {
        let query = db.collection('games').orderBy('createdAt', 'desc');

        if (filter.category) query = query.where('category', '==', filter.category);
        if (filter.age) query = query.where('age', '==', filter.age);

        const snapshot = await query.offset(page * this.pageSize).limit(this.pageSize).get();

        if (snapshot.empty) {
            return this.bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.');
            // return sendMainMenu(this.bot, chatId, session.name, session.role);
        }

        for (const doc of snapshot.docs) {
            const game = doc.data();
            const gameId = doc.id;
            const caption = `üéÆ *${game.name}*\nüìÇ ${game.category} | üîû ${game.age}`;
            const keyboard = {
                inline_keyboard: [[{ text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `game_${gameId}` }]]
            };

            if (game.image && typeof game.image === 'string') {
                try {
                    await this.bot.sendPhoto(chatId, game.image, {
                        caption,
                        parse_mode: 'Markdown',
                        reply_markup: keyboard
                    });
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–≥—Ä—ã:', game.name, '-', err.message);
                    await this.bot.sendMessage(chatId, caption, {
                        parse_mode: 'Markdown',
                        reply_markup: keyboard
                    });
                }
            } else {
                await this.bot.sendMessage(chatId, caption, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }

        }

        return this.sendNavigationControls(chatId, filter, page);
    }


    async sendNavigationControls(chatId, filter, page) {
        const navKeyboard = [];

        const row = [];

        let query = db.collection('games').orderBy('createdAt', 'desc');
        if (filter.category) query = query.where('category', '==', filter.category);
        if (filter.age) query = query.where('age', '==', filter.age);

        const nextPageSnapshot = await query.offset((page + 1) * this.pageSize).limit(1).get();

        if (page > 0) {
            row.push({ text: '‚¨Ö –ù–∞–∑–∞–¥', callback_data: `games_page_${page - 1}` });
        }

        if (!nextPageSnapshot.empty) {
            row.push({ text: '‚û° –í–ø–µ—Ä—ë–¥', callback_data: `games_page_${page + 1}` });
        }

        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä—ë–¥"/"–Ω–∞–∑–∞–¥", –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        if (row.length > 0) navKeyboard.push(row);

        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        navKeyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main_menu_view' }]);

        return this.bot.sendMessage(chatId, 'üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–≥—Ä–∞–º:', {
            reply_markup: { inline_keyboard: navKeyboard }
        });
    }


    async showGameDetails(chatId, gameId, page, filter) {
        const doc = await db.collection('games').doc(gameId).get();

        if (!doc.exists) {
            return this.bot.sendMessage(chatId, '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }

        const game = doc.data();
        const text = `üéÆ *${game.name}*\n\nüìÑ ${game.description}\nüóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${game.category}\n–í–æ–∑—Ä–∞—Å—Ç: ${game.age}`;

        const backKeyboard = {
            inline_keyboard: [[
                {text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main_menu_view'}
            ]]
        };

        if (game.image) {
            await this.bot.sendPhoto(chatId, game.image, {
                caption: text,
                parse_mode: 'Markdown',
                reply_markup: backKeyboard
            });
        } else {
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                reply_markup: backKeyboard
            });
        }
    }
}

module.exports = GameViewHandler;
