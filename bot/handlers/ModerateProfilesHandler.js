const db = require('../../firebase');
const { getSession } = require('../utils/session');
const sendMainMenu = require('../views/MainMenu');

let initialized = false;

class ModerateProfilesHandler {
    constructor(bot) {
        if (initialized) return;
        initialized = true;

        this.bot = bot;

        bot.on('callback_query', this.handleCallbackQuery.bind(this));
    }

    async handleCallbackQuery(query) {
        const userId = query.from.id;
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;
        const data = query.data;

        const session = await getSession(userId);
        await this.bot.answerCallbackQuery(query.id);

        if (data === 'view_profiles') {
            return this.showNextProfile(chatId, session, 0);
        }

        if (data.startsWith('next_profile_')) {
            const index = parseInt(data.split('_')[2]);
            return this.showNextProfile(chatId, session, index);
        }

        if (data.startsWith('approve_profile_')) {
            const [_, __, docId, targetUserId] = data.split('_');
            await this.approveProfile(docId, targetUserId, chatId, messageId, session);
        }

        if (data.startsWith('reject_profile_')) {
            const docId = data.replace('reject_profile_', '');
            const doc = await db.collection('specialistForms').doc(docId).get();

            if (doc.exists) {
                const form = doc.data();
                const targetUserId = form.userId;

                await db.collection('specialistForms').doc(docId).delete();
                await this.bot.deleteMessage(chatId, messageId);
                await this.bot.sendMessage(chatId, '‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try {
                    await this.bot.sendMessage(targetUserId, '‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø–æ–∑–∂–µ.');
                } catch (notifyErr) {
                    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:`, notifyErr.message);
                }
            }

            return this.showNextProfile(chatId, session, 0);
        }

        if (data === 'back_to_main_from_profiles') {
            await this.bot.deleteMessage(chatId, messageId);
            return sendMainMenu(this.bot, chatId, session.name, session.role);
        }
    }

    async showNextProfile(chatId, session, index = 0) {
        try {
            const snapshot = await db.collection('specialistForms')
                .orderBy('timestamp', 'asc')
                .get();

            const forms = snapshot.docs;
            if (forms.length === 0) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç.');
                return sendMainMenu(this.bot, chatId, session.name, session.role);

            }

            if (index >= forms.length) {
                return this.bot.sendMessage(chatId, 'üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç.');
            }

            const doc = forms[index];
            const data = doc.data();

            const caption = `üìù *–ê–Ω–∫–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞*\n\nüë§ –ò–º—è: ${data.name}\nüÜî ID: ${data.userId}\nüïí ${new Date(data.timestamp).toLocaleString('ru-RU')}\n\nüìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${data.description}`;

            const inline_keyboard = [
                [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_profile_${doc.id}_${data.userId}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_profile_${doc.id}` }
                ]
            ];

            if (index < forms.length - 1) {
                inline_keyboard.push([
                    { text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: `next_profile_${index + 1}` }
                ]);
            }

            inline_keyboard.push([
                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main_from_profiles' }
            ]);

            if (data.files && data.files.length > 0) {
                await this.bot.sendMediaGroup(chatId,
                    data.files.map((fileId) => ({
                        type: 'photo',
                        media: fileId
                    }))
                );
            }

            return this.bot.sendMessage(chatId, caption, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç:', error);
            return this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã.');
        }
    }

    async approveProfile(docId, userId, chatId, messageId, session) {
        try {
            await db.collection('admins').doc(String(userId)).set({
                role: 'admin',
                approvedBy: session.name,
                timestamp: new Date().toISOString()
            });

            await db.collection('specialistForms').doc(docId).delete();

            await this.bot.deleteMessage(chatId, messageId);
            await this.bot.sendMessage(chatId, '‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.');

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try {
                await this.bot.sendMessage(userId, '‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
                return sendMainMenu(this.bot, chatId, session.name, session.role);

            } catch (notifyErr) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, notifyErr.message);
            }

            return this.showNextProfile(chatId, session, 0);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã:', err);
            return this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.');
        }
    }

}

module.exports = ModerateProfilesHandler;
