const db = require('../../firebase');
const { getSession, clearSession } = require('../utils/session');
const { checkAdminRole } = require('../utils/utils');
const messages = require('../config/messages');
const keyboards = require('../config/keyboards');
const sendMainMenu = require('../views/MainMenu');

class GameCreateHandler {
    constructor(bot) {
        this.bot = bot;

        bot.on('callback_query', this.handleCallbackQuery.bind(this));
        bot.on('message', this.handleMessage.bind(this));
    }

    async handleCallbackQuery(query) {
        const { id, data, from, message } = query;
        const userId = from.id;
        const chatId = message.chat.id;
        const messageId = message.message_id;
        const session = await getSession(userId);

        try {
            if (data === 'add_game') {
                const check = await checkAdminRole(userId, 'admin');
                if (!check.ok) {
                    return this.bot.answerCallbackQuery(id, {
                        text: '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä.',
                        show_alert: true
                    });
                }

                clearSession(userId);
                const newSession = await getSession(userId);
                newSession.step = 'awaiting_game_name';
                newSession.newGame = {};

                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                await this.cleanUpPreviousMessages(chatId, newSession);

                const sent = await this.bot.sendMessage(chatId, 'üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:', {
                    reply_markup: keyboards.cancelKeyboard
                });

                newSession.promptMessageId = sent.message_id;
                return this.bot.answerCallbackQuery(id);
            }

            if (data.startsWith('set_game_category_')) {
                const category = data.replace('set_game_category_', '');
                session.newGame.category = category;
                session.step = 'awaiting_game_age';

                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                await this.cleanUpPreviousMessages(chatId, session);

                await this.bot.answerCallbackQuery(id);
                const sent = await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:', {
                    reply_markup: {
                        inline_keyboard: [
                            ...keyboards.gameAgeKeyboard.inline_keyboard,
                            ...keyboards.cancelKeyboard.inline_keyboard
                        ]
                    }
                });

                session.promptMessageId = sent.message_id;
                return;
            }

            if (data.startsWith('set_game_age_')) {
                const age = data.replace('set_game_age_', '') + '+';
                session.newGame.age = age;
                session.step = 'awaiting_game_image';

                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                await this.cleanUpPreviousMessages(chatId, session);

                await this.safeDeleteMessage(chatId, messageId);
                await this.bot.answerCallbackQuery(id);

                const sent = await this.bot.sendMessage(chatId, 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±–ª–æ–∂–∫—É) –¥–ª—è –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_game_image' }],
                            ...keyboards.cancelKeyboard.inline_keyboard
                        ]
                    }
                });

                session.promptMessageId = sent.message_id;
                return;
            }

            if (data === 'skip_game_image') {
                await this.saveGameAndReturn(userId, chatId, session.newGame, id);
            }

            if (data === 'cancel_game_creation') {
                if (session.promptMessageId) {
                    await this.safeDeleteMessage(chatId, session.promptMessageId);
                }

                await this.safeDeleteMessage(chatId, messageId);
                clearSession(userId);
                await this.bot.answerCallbackQuery(id);
                return this.bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback_query:', err);
            await this.bot.answerCallbackQuery(id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', show_alert: true });
        }
    }

    async handleMessage(msg) {
        const userId = msg.from.id;
        const chatId = msg.chat.id;
        const text = msg.text?.trim();
        const session = await getSession(userId);

        if (!session.step) return;

        session.newGame = session.newGame || {};

        try {
            switch (session.step) {
                case 'awaiting_game_name':
                    if (!text) return this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');

                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                    await this.cleanUpPreviousMessages(chatId, session);

                    session.newGame.name = text;
                    session.step = 'awaiting_game_description';

                    const sent1 = await this.bot.sendMessage(chatId, 'üìÑ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:', {
                        reply_markup: keyboards.cancelKeyboard
                    });

                    session.promptMessageId = sent1.message_id;
                    break;

                case 'awaiting_game_description':
                    if (!text) return this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');

                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                    await this.cleanUpPreviousMessages(chatId, session);

                    session.newGame.description = text;
                    session.step = 'awaiting_game_category';

                    const sent2 = await this.bot.sendMessage(chatId, 'üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–∂–∞–Ω—Ä –∏–≥—Ä—ã:', {
                        reply_markup: {
                            inline_keyboard: [
                                ...keyboards.gameCategoryKeyboard.inline_keyboard,
                                ...keyboards.cancelKeyboard.inline_keyboard
                            ]
                        }
                    });

                    session.promptMessageId = sent2.message_id;
                    break;

                case 'awaiting_game_image':
                    if (msg.photo) {
                        const fileId = msg.photo.at(-1).file_id;
                        session.newGame.image = fileId;
                        await this.saveGameAndReturn(userId, chatId, session.newGame);
                    } else {
                        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                        await this.cleanUpPreviousMessages(chatId, session);

                        const sent3 = await this.bot.sendMessage(chatId, 'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.', {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_game_image' }],
                                    ...keyboards.cancelKeyboard.inline_keyboard
                                ]
                            }
                        });

                        session.promptMessageId = sent3.message_id;
                    }
                    break;
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    async saveGameAndReturn(userId, chatId, gameData, callbackId = null) {
        const game = {
            ...gameData,
            createdAt: new Date()
        };

        await db.collection('pendingGames').add(game);
        clearSession(userId);
        const session = await getSession(userId);

        if (callbackId) {
            await this.bot.answerCallbackQuery(callbackId);
        }

        await this.bot.sendMessage(chatId, `‚úÖ –ò–≥—Ä–∞ "${game.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
        return sendMainMenu(this.bot, chatId, session.name, session.role);
    }

    async safeDeleteMessage(chatId, messageId) {
        if (!messageId || !chatId) {
            console.log('‚ö† –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
            return;
        }

        try {
            await this.bot.deleteMessage(chatId, messageId);
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—à–∏–±–∫–∏
            const errorMessage =
                error.response?.description ||
                error.description ||
                error.message ||
                '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

            if (errorMessage.includes('message to delete not found')) {
                // –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                console.log(`‚Ñπ –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ`);
                return;
            }

            console.warn(`‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, errorMessage);
        }
    }
    async cleanUpPreviousMessages(chatId, session) {
        try {
            if (session.promptMessageId) {
                await this.safeDeleteMessage(chatId, session.promptMessageId);
                session.promptMessageId = null;
            }
        } catch (e) {
            console.warn('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', e.message);
        }
    }
}
module.exports = GameCreateHandler;